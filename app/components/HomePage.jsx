"use client";
import React, { useEffect, useState } from "react";
import styles from "@/app/globals.module.css";
import { FiPlus } from "react-icons/fi";
import { realtime__db } from "../firebase/firebase.config";
import { onValue, ref, remove, set } from "firebase/database";
import { useSelector } from "react-redux";
import Image from "next/image";
import moment from "moment";
import { defaultImgProvider } from "./defaultImgProvider";
// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };
const HomePage = () => {
  const user = useSelector((st) => st.user.auth);
  const [userList, setUserList] = useState([]);
  useEffect(() => {
    const userListRef = ref(realtime__db, "users/");
    onValue(userListRef, (snapshot) => {
      const arr = [];
      const snapshotData = snapshot.val();
      if (snapshotData) {
        Object.keys(snapshotData).forEach((key) => {
          if (key !== user.uid) {
            arr.push(snapshotData[key]);
          }
        });
      }

      setUserList(arr);
      console.log(arr);
    });
  }, []);
  const [friendReqList, setFriendReqList] = useState([]);

  const sendFriendReq = (uid, name, email, photoURL) => {
    const combinedUid = uid + user.uid;
    const friendReqRef = ref(realtime__db, `friendRequests/${combinedUid}`);
    set(friendReqRef, {
      fromUid: user.uid,
      toUid: uid,
      senderName: user.displayName,
      receiverName: name,
      senderEmail: user.email,
      receiverEmail: email,
      photoURL: `${user.photoURL ? user.photoURL : defaultImgProvider()}`,
    });
    console.log(user.displayName);
  };
  const [keys, setKeys] = useState([]);
  useEffect(() => {
    const friendReqListRef = ref(realtime__db, `friendRequests/`);

    onValue(friendReqListRef, (snapshot) => {
      // const cmId = user.uid +
      const arr = [];
      const arr__send = [];
      if (snapshot.val()) {
        Object.keys(snapshot.val()).forEach((key) => {
          console.log(snapshot.val()[key].toUid, user.uid);
          if (snapshot.val()[key].toUid === user.uid) {
            arr.push(snapshot.val()[key]);
          }
          arr__send.push(key);
        });
      }
      setFriendReqList(arr);
      setKeys(arr__send);
      // console.log(keys);
    });
  }, []);
  const acceptFriendReq = async (
    senderName,
    senderEmail,
    senderPhotoURL,
    senderUid,
    receiverName,
    receiverEmail,
    receiverPhotoURL,
    receiverUid
  ) => {
    const friendListRef = ref(
      realtime__db,
      "friendList/" + senderUid + user.uid
    );
    set(friendListRef, {
      senderName,
      senderEmail,
      senderPhotoURL,
      senderUid,
      receiverName,
      receiverEmail,
      receiverPhotoURL,
      receiverUid,
      createdAt: new Date().toISOString(),
    });
    const key = receiverUid + senderUid;
    const friendReqRef = ref(realtime__db, `friendRequests/${key}`);
    try {
      await remove(friendReqRef);
    } catch (err) {
      console.log(err);
    }
  };
  const rejectFriendReq = async (a, b) => {
    const key = a + b;
    const friendReqRef = ref(realtime__db, `friendRequests/${key}`);
    try {
      await remove(friendReqRef);
    } catch (err) {
      console.log(err);
    }
    // delete friendReqRef;
  };
  const [friendList, setFriendList] = useState([]);
  useEffect(() => {
    const friendListRef = ref(realtime__db, "friendList/");
    onValue(friendListRef, (snapshot) => {
      const arr = [];
      if (snapshot.val()) {
        Object.keys(snapshot.val()).forEach((key) => {
          arr.push(snapshot.val()[key]);
        });
      }
      setFriendList(arr);
      console.log(friendList);
    });
  }, []);
  const [blockList, setBlockList] = useState([]);

  useEffect(() => {
    const blockListRef = ref(
      realtime__db,
      "users/" + `${user.uid}/` + "blocklist/"
    );
    onValue(blockListRef, (snapshot) => {
      const arr = [];
      if (snapshot.val()) {
        Object.keys(snapshot.val()).forEach((key) => {
          arr.push(snapshot.val()[key]);
        });
      }
      setBlockList(arr);
    });
  }, []);
  const handleBlock = (friend) => {
    // const friendListRef = ref(
    //   realtime__db,
    //   "friendList/" + friend.senderUid + friend.receiverUid
    // );
    // remove(friendListRef);
    const blocklistRef = ref(
      realtime__db,
      "users/" + `${friend.receiverUid}/` + "blocklist/" + friend.receiverUid
    );
    const blocklistRef2 = ref(
      realtime__db,
      "users/" + `${friend.senderUid}/` + "blocklist/" + friend.receiverUid
    );
    if (friend.receiverUid === user.uid) {
      set(blocklistRef, {
        blockedbyuid: friend.senderUid,
        blockedbyname: friend.senderName,
        blockedbyemail: friend.senderEmail,
        blockedbyphoto: friend.senderPhotoURL,
        blockedusername: friend.receiverName,
        blockeduseremail: friend.receiverEmail,
        blockeduserphoto: friend.receiverPhotoURL,
        blockeduseruid: friend.receiverUid,
        createdAt: friend.createdAt,
      });
      set(blocklistRef2, {
        blockedbyuid: friend.senderUid,
        blockedbyname: friend.senderName,
        blockedbyemail: friend.senderEmail,
        blockedbyphoto: friend.senderPhotoURL,
        blockedusername: friend.receiverName,
        blockeduseremail: friend.receiverEmail,
        blockeduserphoto: friend.receiverPhotoURL,
        blockeduseruid: friend.receiverUid,
        createdAt: friend.createdAt,
      });
    } else {
      set(blocklistRef, {
        blockedbyuid: friend.receiverUid,
        blockedbyname: friend.receiverName,
        blockedbyemail: friend.receiverEmail,
        blockedbyphoto: friend.receiverPhotoURL,
        blockedusername: friend.senderName,
        blockeduseremail: friend.senderEmail,
        blockeduserphoto: friend.senderPhotoURL,
        blockeduseruid: friend.senderUid,
        createdAt: friend.createdAt,
      });
      set(blocklistRef2, {
        blockedbyuid: friend.receiverUid,
        blockedbyname: friend.receiverName,
        blockedbyemail: friend.receiverEmail,
        blockedbyphoto: friend.receiverPhotoURL,
        blockedusername: friend.senderName,
        blockeduseremail: friend.senderEmail,
        blockeduserphoto: friend.senderPhotoURL,
        blockeduseruid: friend.senderUid,
        createdAt: friend.createdAt,
      });
    }
    console.log(friend);
  };
  const handleUnBlock = (uid, uid2) => {
    const unBlockRef = ref(realtime__db, `users/${uid2}/blocklist/`);
    const unBlockRef2 = ref(realtime__db, `users/${uid}/blocklist/`);
    remove(unBlockRef);
    remove(unBlockRef2);
    console.log(uid);
  };
  return (
    <div className=" flex-1  flex flex-col h-[calc(100%-20px)] gap-[20px]">
      <div className=" flex-1 h-[50%] flex justify-between gap-[20px]">
        <div className={`flex-1 ${styles.login__containeer} `}>
          <header className=" px-[20px] py-[15px] text-[#8698a599] text-[20px]">
            Group List
          </header>
          <div className=" overflow-y-auto h-[calc(100%-65px)] px-[20px]">
            {Array.from({ length: 10 }, (_, index) => index + 1).map((val) => {
              return (
                <div
                  key={val}
                  className=" w-full h-[60px] bg-[#ffffff0a] mb-[7px] rounded-md shadow-sm"
                >
                  <div className="w-full flex justify-between  text-[#8698a5ad] items-center h-full px-[10px]">
                    <div className=" flex items-center  gap-[10px]">
                      <img
                        className=" w-[40px] bg-[#8698a51c] rounded-full"
                        src={defaultImgProvider()}
                        alt="profile__image"
                      />
                      <span>example group</span>
                    </div>
                    <button className=" px-[10px] py-[7px] rounded-md shadow-sm bg-[#8698a533]">
                      Join
                    </button>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
        <div className={`flex-1 ${styles.login__containeer} `}>
          <header className=" px-[20px] py-[15px] text-[#8698a599] text-[20px]">
            Friends
          </header>
          <div className=" overflow-y-auto h-[calc(100%-65px)] px-[20px]">
            {friendList
              .filter(
                (val) =>
                  !blockList.some(
                    (blockedFriend) =>
                      blockedFriend.blockedbyuid === val.senderUid ||
                      blockedFriend.blockedbyuid === val.receiverUid
                  )
              )
              .map((val, idx) => {
                console.log(blockList[idx]);

                return blockList[idx]?.blockedbyuid === val.senderUid ? null : (
                  <div
                    key={val.senderUid + val.receiverUid}
                    className=" w-full h-[100px] bg-[#ffffff0a] mb-[7px] rounded-md shadow-sm"
                  >
                    <div className="w-full flex justify-between  text-[#8698a5ad] items-center h-full px-[10px] py-[10px] flex-col">
                      <div className=" flex items-center w-full gap-[10px]">
                        <img
                          className=" w-[40px] bg-[#8698a51c] rounded-full"
                          src={
                            val.senderUid === user.uid
                              ? val.receiverPhotoURL
                              : val.senderPhotoURL
                          }
                          alt="profile__image"
                        />
                        <span className=" flex flex-col  justify-center h-full">
                          <span className=" leading-[0.8]">
                            {val.senderUid === user.uid
                              ? val.receiverName
                              : val.senderName}
                          </span>
                          <span className=" text-[13px]">
                            {val.senderUid === user.uid
                              ? val.receiverEmail
                              : val.senderEmail}
                          </span>
                        </span>
                      </div>
                      <div className=" flex justify-center gap-[20px] items-center w-full py-[5px]">
                        <p className="text-[13px]">
                          {moment(val.createdAt).fromNow()}
                        </p>
                        <button
                          className="px-[10px] py-[7px] rounded-md shadow-sm bg-[#8698a533]"
                          onClick={() => handleBlock(friendList[idx])}
                        >
                          block
                        </button>
                      </div>
                    </div>
                  </div>
                );
              })}
          </div>
        </div>
        <div className={`flex-1 ${styles.login__containeer} `}>
          <header className=" px-[20px] py-[15px] text-[#8698a599] text-[20px]">
            User List
          </header>
          <div className=" overflow-y-auto h-[calc(100%-65px)] px-[20px]">
            {userList.map((val) => {
              return (
                <div
                  key={val.email}
                  className=" w-full h-[60px] bg-[#ffffff0a] mb-[7px] rounded-md shadow-sm"
                >
                  <div className="w-full flex justify-between  text-[#8698a5ad] items-center h-full px-[10px]">
                    <div className=" flex items-center  gap-[10px]">
                      <img
                        className=" w-[40px] bg-[#8698a51c] rounded-full"
                        src={val.photoURL ? val.photoURL : defaultImgProvider()}
                        alt="profile__image"
                      />
                      <span className=" flex flex-col">
                        <span>{val.name}</span>
                        <span className=" text-[13px]">{val.email}</span>
                      </span>
                    </div>

                    {!keys.includes(user.uid + val.uid) &&
                      !keys.includes(val.uid + user.uid) &&
                      !friendList.some(
                        (item) =>
                          item.receiverUid.includes(val.uid) ||
                          item.senderUid.includes(val.uid)
                      ) && (
                        <button
                          onClick={() => {
                            sendFriendReq(
                              val.uid,
                              val.name,
                              val.email,
                              val.photoURL
                            );
                          }}
                          className=" px-[10px] py-[7px] rounded-md shadow-sm bg-[#8698a533]"
                        >
                          <FiPlus />
                        </button>
                      )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
      <div className=" flex-1 h-[50%] flex justify-between gap-[20px]">
        <div className={`flex-1 ${styles.login__containeer} `}>
          <header className=" px-[20px] py-[15px] text-[#8698a599] text-[20px]">
            Friend Request
          </header>
          <div className=" overflow-y-auto h-[calc(100%-65px)] px-[20px]">
            {friendReqList.map((val) => {
              console.log(val);
              return (
                <div
                  key={val.fromUid}
                  className=" w-full h-[60px] bg-[#ffffff0a] mb-[7px] rounded-md shadow-sm"
                >
                  <div className="w-full flex justify-between  text-[#8698a5ad] items-center h-full px-[10px]">
                    <div className=" flex items-center  gap-[10px]">
                      <Image
                        className=" w-[40px] bg-[#8698a51c] rounded-full"
                        src={val.photoURL ? val.photoURL : defaultImgProvider()}
                        alt="profile__image"
                        height={40}
                        width={40}
                      />
                      <span>{val.senderName}</span>
                    </div>
                    <div>
                      <button
                        className=" px-[12px] py-[7px] rounded-md shadow-sm bg-[#8698a533] mr-[10px]"
                        onClick={() => {
                          rejectFriendReq(val.toUid, val.fromUid);
                        }}
                      >
                        X
                      </button>
                      <button
                        onClick={() => {
                          const senderPhotoURL = val.photoURL
                            ? val.photoURL
                            : defaultImgProvider();
                          const receiverPhotoURL = user.photoURL
                            ? user.photoURL
                            : defaultImgProvider();
                          acceptFriendReq(
                            val.senderName,
                            val.senderEmail,
                            senderPhotoURL,
                            val.fromUid,
                            val.receiverName,
                            val.receiverEmail,
                            receiverPhotoURL,
                            val.toUid
                          );
                        }}
                        className=" px-[10px] py-[7px] rounded-md shadow-sm bg-[#8698a533]"
                      >
                        Accept
                      </button>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
        <div className={`flex-1 ${styles.login__containeer} `}>
          <header className=" px-[20px] py-[15px] text-[#8698a599] text-[20px]">
            My Groups
          </header>
          <div className=" overflow-y-auto h-[calc(100%-65px)] px-[20px]">
            {Array.from({ length: 10 }, (_, index) => index + 1).map((val) => {
              return (
                <div
                  key={val}
                  className=" w-full h-[60px] bg-[#ffffff0a] mb-[7px] rounded-md shadow-sm"
                >
                  <div className="w-full flex justify-between  text-[#8698a5ad] items-center h-full px-[10px]">
                    <div className=" flex items-center  gap-[10px]">
                      <img
                        className=" w-[40px] bg-[#8698a51c] rounded-full"
                        src={defaultImgProvider()}
                        alt="profile__image"
                      />
                      <span className=" flex flex-col  justify-center h-full">
                        <span className=" leading-[0.8]">Ex. Group</span>
                        <span className=" text-[13px]">Sure!</span>
                      </span>
                    </div>
                    <p className="text-[13px]">Yesterday, 6:22pm</p>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
        <div className={`flex-1 ${styles.login__containeer} `}>
          <header className=" px-[20px] py-[15px] text-[#8698a599] text-[20px]">
            Blocked Users
          </header>
          <div className=" overflow-y-auto h-[calc(100%-65px)] px-[20px]">
            {blockList.map((val) => {
              const isBlocker = val.blockedbyuid === user.uid;

              return (
                <div
                  key={val}
                  className=" w-full h-[60px] bg-[#ffffff0a] mb-[7px] rounded-md shadow-sm"
                >
                  <div className="w-full flex justify-between  text-[#8698a5ad] items-center h-full px-[10px]">
                    <div className=" flex items-center  gap-[10px]">
                      <img
                        className=" w-[40px] bg-[#8698a51c] rounded-full"
                        src={defaultImgProvider()}
                        alt="profile__image"
                      />
                      <span>
                        {val.blockedusername === user.displayName
                          ? val.blockedbyname
                          : val.blockedusername}
                      </span>
                    </div>
                    {!isBlocker && (
                      <button
                        onClick={() =>
                          handleUnBlock(val.blockeduseruid, val.blockedbyuid)
                        }
                        className=" px-[10px] py-[7px] rounded-md shadow-sm bg-[#8698a533]"
                      >
                        Unblock
                      </button>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
};

export default HomePage;
